#include "gen_common.h"
#include <boost/algorithm/string.hpp>

std::string gen_rights(std::string filename, std::string author) {
	using namespace std;
	using namespace boost;
	string line_filename = " File: " + filename + " \n";
	string line_author = " Author: " + filename + " \n";
	string line_cfor = " Generated by CFortranTranslator \n CFortranTranslator is an open-source software under GPL license \n visit https://github.com/CalvinNeo/CFortranTranslator/ for more";

	vector<string> splitvec;
	split(splitvec, line_filename + line_author + line_cfor, is_any_of("\n"), token_compress_on);
	string content;
	int longest = 0;
	for (int i = 0; i < splitvec.size(); i++)
	{
		longest = max(longest, (int)splitvec[i].size());
	}
	for (int i = 0; i < splitvec.size(); i++)
	{
		content += "/*";
		content += splitvec[i];
		content += string(longest - splitvec[i].size(), ' ');
		content +=  "*/\n";
	}
	sprintf(codegen_buf, "/*%s*/\n%s/*%s*/\n", string(longest , '*').c_str(), content.c_str(), string(longest, '*').c_str());
	return string(codegen_buf);
}


ParseNode gen_header() {
	std::string x = gen_rights("   ", "   ");
	x += "#include \"../for90std/for90std.h\" \n";
	if (parse_config.usefor) {
		x += "#define USE_FORARRAY \n";
	}
	else {
		x += "#define USE_CARRAY \n";
	}
	ParseNode newnode = ParseNode(gen_flex(Term{TokenMeta::META_NONTERMINAL, x.c_str()}), nullptr);	
	return newnode;
}
m4_init()
m4_define([b4_actions], 
[b4_case(2, [b4_syncline(55, [["for90.y"]])
[    {
				]b4_lhs_value([])[.fs.CurrentTerm = Term{ TokenMeta::CRLF, "\n" };
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(3, [b4_syncline(60, [["for90.y"]])
[    {
				]b4_lhs_value([])[.fs.CurrentTerm = Term{ TokenMeta::Semicolon, ";" };
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(4, [b4_syncline(65, [["for90.y"]])
[    {
				]b4_lhs_value([])[.fs.CurrentTerm = Term{ TokenMeta::Nop, "" };
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(8, [b4_syncline(75, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_VARIABLEDESC, "NT_VARIABLEDESC" }; // intent(in)
				newnode->attr = new VariableDescAttr(newnode);
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.reference = true;
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.constant = true;
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(9, [b4_syncline(85, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_VARIABLEDESC, "NT_VARIABLEDESC" }; // intent(out)
				newnode->attr = new VariableDescAttr(newnode);
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.reference = true;
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.constant = false;
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(10, [b4_syncline(96, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_VARIABLEDESC, "NT_VARIABLEDESC" }; // intent(inout)
				newnode->attr = new VariableDescAttr(newnode);
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.reference = true;
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.constant = false;
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(11, [b4_syncline(106, [["for90.y"]])
[    {
				/* if write `',' YY_DIMENSION` in `var_def` will cause conflict at ',' */
				/* if is array reduce immediately and goto `var_def` */
				/* do not parse array slices here because it can be dificult */
				ParseNode * newnode = new ParseNode();
				ParseNode * dimen = new ParseNode(]b4_rhs_value(4, 3, [])[);
				newnode->addchild(dimen); // def slice
				int sliceid = 0; /* if the array has 2 dimensions, sliceid is 0..1 */
				for (sliceid = 0; sliceid < dimen->child.size(); sliceid++)
				{
					sprintf(codegen_buf, "(%s, %s)"
						/* from, to */
						, dimen->child@{sliceid@}->child@{0@}->fs.CurrentTerm.what.c_str()
						, dimen->child@{sliceid@}->child@{1@}->fs.CurrentTerm.what.c_str());
					dimen->child@{sliceid@}->fs.CurrentTerm = Term{ TokenMeta::NT_VARIABLEDESC, string(codegen_buf) };
				}
				newnode->attr = new VariableDescAttr(newnode);
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.slice = dimen;
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(12, [b4_syncline(128, [["for90.y"]])
[    {
				/* define array like a(1) */
				ParseNode * newnode = new ParseNode();
				ParseNode * dimen = new ParseNode();
				ParseNode * slice = new ParseNode();
				ParseNode * exp = new ParseNode();
				exp->fs.CurrentTerm = Term{ TokenMeta::NT_VARIABLEDESC, "1" };
				slice->addchild(exp); // slice from 1
				sprintf(codegen_buf, "%s", /* from 1, to */]b4_rhs_value(4, 3, [])[.fs.CurrentTerm.what.c_str());
				slice->addchild(new ParseNode(]b4_rhs_value(4, 3, [])[)); // slice to
				dimen->addchild(slice);
				newnode->addchild(dimen); // def slice

				int sliceid = 0; /* only 1 dimension */
				sprintf(codegen_buf, "(%s, %s)"
					/* from 1, to */
					, dimen->child@{sliceid@}->child@{0@}->fs.CurrentTerm.what.c_str()
					, dimen->child@{sliceid@}->child@{1@}->fs.CurrentTerm.what.c_str());
				dimen->child@{sliceid@}->fs.CurrentTerm = Term{ TokenMeta::NT_VARIABLEDESC, string(codegen_buf) };

				newnode->attr = new VariableDescAttr(newnode);
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.slice = dimen;
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(13, [b4_syncline(154, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_VARIABLEDESC, "NT_VARIABLEDESC" }; // intent(inout)
				newnode->attr = new VariableDescAttr(newnode);
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.optional = true;
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(14, [b4_syncline(163, [["for90.y"]])
[    {
				/* const value */
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_VARIABLEDESC, "NT_VARIABLEDESC" }; // const
				newnode->attr = new VariableDescAttr(newnode);
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.constant = true;
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(15, [b4_syncline(174, [["for90.y"]])
[    {
				int kind;
				sscanf(]b4_rhs_value(3, 3, [])[.fs.CurrentTerm.what.c_str(), "%d", &kind);
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_VARIABLEDESC, "NT_VARIABLEDESC" }; // kind
				newnode->attr = new VariableDescAttr(newnode);
				dynamic_cast<VariableDescAttr *>(newnode->attr)->desc.kind = kind;
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(16, [b4_syncline(185, [["for90.y"]])
[    {
				// do nothing because we use std::string
			}]])

b4_case(17, [b4_syncline(190, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode(]b4_rhs_value(2, 1, [])[);
				]b4_lhs_value([])[ = ]b4_rhs_value(2, 2, [])[;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(18, [b4_syncline(196, [["for90.y"]])
[    {
				ParseNode * variable_iden = & ]b4_rhs_value(3, 3, [])[;
				ParseNode & variable_iden_1 = ]b4_rhs_value(3, 2, [])[;
				/* target code of slice depend on context */
				ParseNode newnode = ParseNode(gen_flex(Term{ TokenMeta::NT_VARIABLEDESC, "NT_VARIABLEDESC" }), nullptr);
				/* merge attrs */
				newnode.attr = variable_iden_1.attr->clone();
				(dynamic_cast<VariableDescAttr *>(newnode.attr))->merge(*dynamic_cast<VariableDescAttr *>(variable_iden->attr));
				// TODO do not add child
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(19, [b4_syncline(209, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_VARIABLEDESC, "NT_VARIABLEDESC" }; 
				newnode->attr = new VariableDescAttr(newnode);
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(20, [b4_syncline(219, [["for90.y"]])
[    {
				/* 该条目下的右部全部为单个终结符号(语法树的叶子节点), 因此$][1全部来自lex程序 */
				]b4_lhs_value([])[ = gen_token(Term{ TokenMeta::Float, ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what });// float number
			}]])

b4_case(21, [b4_syncline(224, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_token(Term{ TokenMeta::Int, ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what });// int number
			}]])

b4_case(22, [b4_syncline(228, [["for90.y"]])
[    {
				// replace `'` with `"`
				]b4_lhs_value([])[ = gen_token(Term{ TokenMeta::String, "\"" + ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what.substr(1, ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what.size() - 2) + "\"" }); // string
			}]])

b4_case(23, [b4_syncline(233, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_token(Term{ TokenMeta::Bool, "true" });// bool true
			}]])

b4_case(24, [b4_syncline(237, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_token(Term{ TokenMeta::Bool, "false" });// bool false
			}]])

b4_case(25, [b4_syncline(241, [["for90.y"]])
[    {
				string strcplx = ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what;
				int splitter = strcplx.find_first_of('_', 0);
				]b4_lhs_value([])[ = gen_token(Term{ TokenMeta::Complex, "forcomplex(" + strcplx.substr(0, splitter) + ", " + strcplx.substr(splitter + 1) + ") " }); //complex
			}]])

b4_case(27, [b4_syncline(251, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::UnknownVariant, ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what }; // variant
				]b4_lhs_value([])[ = *newnode;
			}]])

b4_case(28, [b4_syncline(258, [["for90.y"]])
[    {
				/* array index and function name and type cast */
				string x = ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what;
				]b4_lhs_value([])[ = ]b4_rhs_value(1, 1, [])[;
			}]])

b4_case(29, [b4_syncline(264, [["for90.y"]])
[    {
				/* array index and function name and type cast */
				string x = ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what;
				]b4_lhs_value([])[ = ]b4_rhs_value(1, 1, [])[;
			}]])

b4_case(30, [b4_syncline(271, [["for90.y"]])
[    {
				/* arr@{from : to@} */
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				/* target code of slice depend on context */
				]b4_lhs_value([])[ = gen_slice(exp1, exp2);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(31, [b4_syncline(280, [["for90.y"]])
[    {
				/* arr@{from : to : step@} */
				ParseNode & exp1 = ]b4_rhs_value(5, 1, [])[;
				ParseNode & exp2 = ]b4_rhs_value(5, 3, [])[;
				ParseNode & exp3 = ]b4_rhs_value(5, 5, [])[;
				/* target code of slice depend on context */
				]b4_lhs_value([])[ = gen_slice(exp1, exp2, exp3);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(32, [b4_syncline(290, [["for90.y"]])
[    {
				/* arr@{from : to : step@} */
				ParseNode & lb = gen_exp(gen_token(Term{ TokenMeta::META_INTEGER, "-1" }));
				ParseNode & ub = gen_exp(gen_token(Term{ TokenMeta::META_INTEGER, "-1" }));
				/* target code of slice depend on context */
				]b4_lhs_value([])[ = gen_slice(lb, ub);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(33, [b4_syncline(300, [["for90.y"]])
[    {
				/* 1d array */
				/* arr@{from : to@} */
				/* target code of slice depend on context */
				ParseNode & slice = ]b4_rhs_value(1, 1, [])[;
				// only 1 slice
				]b4_lhs_value([])[ = gen_dimenslice_from_slice(slice);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(34, [b4_syncline(310, [["for90.y"]])
[    {
				/* multi dimension array */
				/* arr@{from:to, from:to, ...@} */
				/* target code of slice depend on context */
				ParseNode & slice = ]b4_rhs_value(3, 1, [])[;
				ParseNode & dimen_slice = ]b4_rhs_value(3, 3, [])[;
				// gen_dimenslice(slice, dimen_slice);
				]b4_lhs_value([])[ = gen_flattern(slice, dimen_slice, "%s, %s", TokenMeta::NT_DIMENSLICE);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(35, [b4_syncline(321, [["for90.y"]])
[    {
				/* argtable is used in function call */
				ParseNode & exp = ]b4_rhs_value(1, 1, [])[;
				]b4_lhs_value([])[ = gen_argtable_from_exp(exp);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(36, [b4_syncline(328, [["for90.y"]])
[    {
				ParseNode & exp = ]b4_rhs_value(3, 1, [])[;
				ParseNode & argtable = ]b4_rhs_value(3, 3, [])[;
				// gen_argtable(exp, argtable);
				]b4_lhs_value([])[ = gen_flattern(exp, argtable, "%s, %s", TokenMeta::NT_ARGTABLE);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(37, [b4_syncline(337, [["for90.y"]])
[    {
				/* function call OR array index */
				/* NOTE that array index can be A(1:2, 3:4) */
				ParseNode & callable_head = ]b4_rhs_value(4, 1, [])[;
				ParseNode & argtable = ]b4_rhs_value(4, 3, [])[;
				]b4_lhs_value([])[ = gen_function_array(callable_head, argtable);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(38, [b4_syncline(347, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = ]b4_rhs_value(1, 1, [])[
			;}]])

b4_case(39, [b4_syncline(351, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = ]b4_rhs_value(2, 2, [])[
			;}]])

b4_case(40, [b4_syncline(356, [["for90.y"]])
[    {
				/* function call OR array index */
				ParseNode & function_array = ]b4_rhs_value(1, 1, [])[;
				]b4_lhs_value([])[ = gen_exp(function_array);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(41, [b4_syncline(364, [["for90.y"]])
[    {
				/* `function_array` rule has priority over this rule  */
				ParseNode & exp = ]b4_rhs_value(3, 2, [])[;
				ParseNode op = gen_token(Term{ TokenMeta::LB, "(" });
				]b4_lhs_value([])[ = gen_exp(exp, op, "( %s )");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(42, [b4_syncline(372, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s + %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(43, [b4_syncline(380, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s - %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(44, [b4_syncline(388, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s * %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(45, [b4_syncline(396, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s / %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(46, [b4_syncline(404, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "power(%s, %s)");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(47, [b4_syncline(412, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(2, 2, [])[;
				ParseNode & op = ]b4_rhs_value(2, 1, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op,  "(-%s)");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(48, [b4_syncline(419, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(2, 2, [])[;
				ParseNode & op = ]b4_rhs_value(2, 1, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op,  "%s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(49, [b4_syncline(426, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s != %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(50, [b4_syncline(434, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s != %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(51, [b4_syncline(442, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s == %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(52, [b4_syncline(450, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s == %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(53, [b4_syncline(458, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s && %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(54, [b4_syncline(466, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s || %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(55, [b4_syncline(474, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(2, 2, [])[;
				ParseNode & op = ]b4_rhs_value(2, 1, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, "!(%s)");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(56, [b4_syncline(481, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s > %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(57, [b4_syncline(489, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s >= %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(58, [b4_syncline(497, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s <= %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(59, [b4_syncline(505, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(3, 1, [])[;
				ParseNode & op = ]b4_rhs_value(3, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s < %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(60, [b4_syncline(513, [["for90.y"]])
[    { 
				// 
				ParseNode & exp = ]b4_rhs_value(1, 1, [])[;
				]b4_lhs_value([])[ = ]b4_rhs_value(1, 1, [])[;
			}]])

b4_case(61, [b4_syncline(519, [["for90.y"]])
[    {
				// may cause reduction-reduction conflict when use `variable` instead of `callable_head`
				// TODO : i am a little strange that `integer::a, b, c` works well because i am afraid that callable_head will reduce to exp from here. however according to LR(1), `::` is not in FOLLOW(exp)
				ParseNode & exp = ]b4_rhs_value(1, 1, [])[;
				]b4_lhs_value([])[ = ]b4_rhs_value(1, 1, [])[;
			}]])

b4_case(62, [b4_syncline(527, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_argtable(]b4_rhs_value(1, 1, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(63, [b4_syncline(532, [["for90.y"]])
[    {
				// TODO : argtable can also be empty
				]b4_lhs_value([])[ = gen_token(Term{ TokenMeta::NT_ARGTABLE_PURE, "" });
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(66, [b4_syncline(542, [["for90.y"]])
[    {
				// TODO IMPORTANT
				/*
					一般来说, 可以不单独建立stmt的ParseNode, 再添加唯一的child(exp, var_def, compound_stmt等).
					但是考虑到在cpp等语言中可能出现使用,分隔多个语句的情况(这种情况是有作用的, 表明编译器可以按照自己的顺序求值)
					所以单独建立stmt节点兵添加$][1位stmt节点的唯一的儿子
				*/
				ParseNode * newnode = new ParseNode();
				ParseNode & exp = ]b4_rhs_value(2, 1, [])[;
				//(crlf.fs.CurrentTerm.token == TokenMeta::CRLF ? ";" : "")
				sprintf(codegen_buf, "%s ;", exp.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_STATEMENT, string(codegen_buf) };
				newnode->addchild(new ParseNode(exp)); // exp
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(67, [b4_syncline(559, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & var_def = ]b4_rhs_value(2, 1, [])[;
				/* 因为var_def本身可能生成多行代码, 因此此处生成代码不应当带分号`;` */
#ifndef LAZY_GEN
				sprintf(codegen_buf, "%s ", var_def.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_STATEMENT, string(codegen_buf) };
#endif // !LAZY_GEN
				newnode->addchild(new ParseNode(var_def)); // var_def
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(72, [b4_syncline(576, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & let = ]b4_rhs_value(1, 1, [])[;
				sprintf(codegen_buf, "%s ;", let.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_STATEMENT, string(codegen_buf) };
				newnode->addchild(new ParseNode(let)); // let
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(73, [b4_syncline(586, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & jmp = ]b4_rhs_value(1, 1, [])[;
				sprintf(codegen_buf, "%s ;", jmp.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_STATEMENT, string(codegen_buf) };
				newnode->addchild(new ParseNode(jmp)); // jmp
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(84, [b4_syncline(612, [["for90.y"]])
[    {
				ParseNode & exp1 = ]b4_rhs_value(4, 1, [])[;
				ParseNode & op = ]b4_rhs_value(4, 2, [])[;
				ParseNode & exp2 = ]b4_rhs_value(4, 3, [])[;
				]b4_lhs_value([])[ = gen_exp(exp1, op, exp2, "%s = %s");
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(85, [b4_syncline(621, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_STATEMENT, "" };
				// dummy stmt
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(86, [b4_syncline(630, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & stmt = ]b4_rhs_value(1, 1, [])[;
				sprintf(codegen_buf, "%s\n", stmt.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_SUITE, string(codegen_buf) };
				newnode->addchild(new ParseNode(stmt)); // stmt
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(87, [b4_syncline(640, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & stmt = ]b4_rhs_value(2, 1, [])[;
				ParseNode & suite = ]b4_rhs_value(2, 2, [])[;
				sprintf(codegen_buf, "%s\n%s", stmt.fs.CurrentTerm.what.c_str(), suite.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_SUITE, string(codegen_buf) };
				newnode->addchild(new ParseNode(stmt)); // stmt
				newnode->addchild(new ParseNode(suite)); // suite
				newnode = flattern_bin(newnode);
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(88, [b4_syncline(653, [["for90.y"]])
[    {
				/* suite can be empty but stmt can not */
				ParseNode * newnode = new ParseNode();
				FlexState fs; fs.CurrentTerm = Term{ TokenMeta::NT_SUITE, "\n" };
				ParseNode & stmt = ParseNode(fs, newnode, nullptr);
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_SUITE, "\n" };
				newnode->addchild(new ParseNode(stmt)); // stmt
				newnode = flattern_bin(newnode);
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(95, [b4_syncline(672, [["for90.y"]])
[    {
				]b4_lhs_value([])[.fs.CurrentTerm = Term{ TokenMeta::META_NONTERMINAL, "" };
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(96, [b4_syncline(677, [["for90.y"]])
[    {
				]b4_lhs_value([])[.fs.CurrentTerm = Term{ TokenMeta::META_NONTERMINAL, ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what };
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(97, [b4_syncline(682, [["for90.y"]])
[    {
				]b4_lhs_value([])[.fs.CurrentTerm = Term{ TokenMeta::NT_AUTOFORMATTER, "" };
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(98, [b4_syncline(687, [["for90.y"]])
[    {
				// replace `'` with `"`
				string modified = "\"" + ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what.substr(1, ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what.size() - 2) + "\"";
				]b4_lhs_value([])[.fs.CurrentTerm = Term{ TokenMeta::NT_FORMATTER, modified };
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(99, [b4_syncline(695, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & _optional_device = ]b4_rhs_value(5, 2, [])[;
				ParseNode & _optional_formatter = ]b4_rhs_value(5, 4, [])[;
				/* target code of io_info depend on context, can be either iostream/cstdio */
				newnode->fs.CurrentTerm = Term{ TokenMeta::META_NONTERMINAL, "" };
				newnode->addchild(new ParseNode(_optional_device)); // _optional_device
				newnode->addchild(new ParseNode(_optional_formatter)); // _optional_formatter
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(100, [b4_syncline(707, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode _optional_device = ParseNode();
				_optional_device.fs.CurrentTerm = Term{ TokenMeta::META_NONTERMINAL, "" };
				ParseNode _optional_formatter = ]b4_rhs_value(2, 1, [])[;
				/* target code of io_info depend on context */
				newnode->fs.CurrentTerm = Term{ TokenMeta::META_NONTERMINAL, "" };
				newnode->addchild(new ParseNode(_optional_device)); // _optional_device
				newnode->addchild(new ParseNode(_optional_formatter)); // _optional_formatter
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(101, [b4_syncline(722, [["for90.y"]])
[    {
				ParseNode & io_info = ]b4_rhs_value(3, 2, [])[;
				ParseNode & argtable = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_write(io_info, argtable);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(102, [b4_syncline(730, [["for90.y"]])
[    {
				ParseNode & io_info = ]b4_rhs_value(3, 2, [])[;
				ParseNode & argtable = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_print(io_info, argtable);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(103, [b4_syncline(739, [["for90.y"]])
[    {
				ParseNode & io_info = ]b4_rhs_value(3, 2, [])[;
				ParseNode & argtable = ]b4_rhs_value(3, 3, [])[;
				]b4_lhs_value([])[ = gen_read(io_info, argtable);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(104, [b4_syncline(747, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(1, 1, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(105, [b4_syncline(752, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(1, 1, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(106, [b4_syncline(757, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(1, 1, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(107, [b4_syncline(762, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(1, 1, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(108, [b4_syncline(767, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(1, 1, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(109, [b4_syncline(772, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(1, 1, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(110, [b4_syncline(778, [["for90.y"]])
[    {
				// now translated in pre_map
				//$][1.fs.CurrentTerm.what = typename_map.at($][1.fs.CurrentTerm.what);
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(4, 1, [])[, ]b4_rhs_value(4, 3, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(111, [b4_syncline(785, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(4, 1, [])[, ]b4_rhs_value(4, 3, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(112, [b4_syncline(790, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(4, 1, [])[, ]b4_rhs_value(4, 3, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(113, [b4_syncline(795, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(4, 1, [])[, ]b4_rhs_value(4, 3, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(114, [b4_syncline(800, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(4, 1, [])[, ]b4_rhs_value(4, 3, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(115, [b4_syncline(805, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = gen_type(]b4_rhs_value(4, 1, [])[, ]b4_rhs_value(4, 3, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(117, [b4_syncline(813, [["for90.y"]])
[    {
				/* array decl */
				ParseNode & type_spec = ]b4_rhs_value(4, 1, [])[;
				ParseNode & variable_desc = ]b4_rhs_value(4, 2, [])[;
				ParseNode & paramtable = ]b4_rhs_value(4, 4, [])[;

				]b4_lhs_value([])[ = gen_vardef(type_spec, variable_desc, paramtable);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(118, [b4_syncline(824, [["for90.y"]])
[    {	
				/* paramtable is used in function decl */
				/* this paramtable has only one value */
				ParseNode & variable = ]b4_rhs_value(1, 1, [])[;
				]b4_lhs_value([])[ = gen_keyvalue(variable);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(119, [b4_syncline(832, [["for90.y"]])
[    {
				/* initial value is required in parse tree because it can be an non-terminal `exp` */
				/* non-array initial values */
				]b4_lhs_value([])[ = gen_keyvalue_from_exp(]b4_rhs_value(3, 1, [])[, ]b4_rhs_value(3, 3, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(120, [b4_syncline(839, [["for90.y"]])
[    {
				/* initial value is required in parse tree because it can be an non-terminal `exp` */
				/* array initial values */;
				/* 因为使用forarray作为数组, 故需要知道类型信息, 不在此处赋值, 在上层的var_def赋初值 */
				]b4_lhs_value([])[ = gen_keyvalue_from_arraybuilder(]b4_rhs_value(3, 1, [])[, ]b4_rhs_value(3, 3, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(121, [b4_syncline(848, [["for90.y"]])
[    {
				//$][$][ = $][1;
				//update_pos($][$][);

				]b4_lhs_value([])[ = gen_paramtable(]b4_rhs_value(1, 1, [])[);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(122, [b4_syncline(856, [["for90.y"]])
[    {
				//ParseNode * newnode = new ParseNode(); 
				//newnode->addchild($][1.child@{0@}); // keyvalue
				//sprintf(codegen_buf, "%s, %s", $][1.fs.CurrentTerm.what.c_str(), $][3.fs.CurrentTerm.what.c_str());
				//newnode->fs.CurrentTerm = Term{ TokenMeta::NT_PARAMTABLE, string(codegen_buf) };
				//ParseNode & pn = $][3;
				//for (int i = 0; i < pn.child.size(); i++)
				//{
				//	newnode->addchild(new ParseNode(*pn.child@{i@})); // paramtable
				//}

				]b4_lhs_value([])[ = gen_flattern(]b4_rhs_value(3, 1, [])[, ]b4_rhs_value(3, 3, [])[, "%s, %s", TokenMeta::NT_PARAMTABLE);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(123, [b4_syncline(871, [["for90.y"]])
[    {
				/* no params */
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_PARAMTABLE, "" };
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(124, [b4_syncline(880, [["for90.y"]])
[    {
				/* something like `abs(i), i=1,4` */
				ParseNode * newnode = new ParseNode();
				newnode->addchild(new ParseNode(]b4_rhs_value(7, 1, [])[)); // exp
				newnode->addchild(new ParseNode(]b4_rhs_value(7, 3, [])[)); // index variable
				newnode->addchild(new ParseNode(]b4_rhs_value(7, 5, [])[)); // exp_from
				newnode->addchild(new ParseNode(]b4_rhs_value(7, 7, [])[)); // exp_to
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(125, [b4_syncline(892, [["for90.y"]])
[    {
				/* give initial value */
				/* NOTE that `B(1:2:3)` can be either a single-element argtable or a exp, this can probably lead to reduction conflicts, NOW we merge rules */
				/* NOTE fortran use a 1d list to initialize a 2d(or higher) array, however, contrary to c++ and most other language does, it store them in a **conlumn - first order**. for a 2d array, it means you a order of a(1)(1)->a(2)(1)->a(lb_1)(1)->a(1)(2) */
				ParseNode * newnode = new ParseNode();
				ParseNode & argtable = ]b4_rhs_value(3, 2, [])[; 
				/* for1array<_Container_value_type> & farr, const std::vector<int> & lower_bound
				, const std::vector<int> & size, const std::vector<T> & values */
				sprintf(codegen_buf, "init_for1array(%%s, %%s, %%s, %s);\n", /* value */ argtable.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_ARRAYBUILDER_VALUE, string(codegen_buf) };
				newnode->addchild(new ParseNode(argtable)); // argtable
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(126, [b4_syncline(907, [["for90.y"]])
[    {
				/* give generate stmt */
				ParseNode * newnode = new ParseNode();
				ParseNode * exp = ]b4_rhs_value(3, 2, [])[.child@{0@};
				ParseNode * index = ]b4_rhs_value(3, 2, [])[.child@{1@};
				ParseNode * from = ]b4_rhs_value(3, 2, [])[.child@{2@};
				ParseNode * to = ]b4_rhs_value(3, 2, [])[.child@{3@};
				sprintf(codegen_buf, "for(int %s = %s; %s < %s; %s++){\n%s(%s) = %s;\n}", index->fs.CurrentTerm.what.c_str(), from->fs.CurrentTerm.what.c_str() /* exp_from */
					, index->fs.CurrentTerm.what.c_str(), to->fs.CurrentTerm.what.c_str() /* exp_to */, index->fs.CurrentTerm.what.c_str() /* index variable inc */
					, "\t%s" /* array variable name */, index->fs.CurrentTerm.what.c_str() /* index variable */, exp->fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_ARRAYBUILDER_EXP, string(codegen_buf) };
				newnode->addchild(new ParseNode(*exp)); // exp
				newnode->addchild(new ParseNode(*index)); // index variable
				newnode->addchild(new ParseNode(*from)); // exp_from
				newnode->addchild(new ParseNode(*to)); // exp_to
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
				// TODO 
				/* rule `YY_ARRAYINITIAL_START variable '(' dimen_slice ')' YY_ARRAYINITIAL_END ` is included in this rule*/
				/* note that this two rules can not be splitted because `exp` and `variable` + '(' can cause reduction conflict */
				/* note either that `variable '(' dimen_slice ')'` is an `exp` */
			}]])

b4_case(129, [b4_syncline(932, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->addchild(new ParseNode(]b4_rhs_value(1, 1, [])[)); // array_builder_elem
				sprintf(codegen_buf, "%s", ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_ARRAYBUILDER, string(codegen_buf) };
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(130, [b4_syncline(941, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->addchild(new ParseNode(]b4_rhs_value(3, 1, [])[)); // array_builder_elem
				newnode->addchild(new ParseNode(]b4_rhs_value(3, 3, [])[)); // array_builder
				sprintf(codegen_buf, "%s\n%s", ]b4_rhs_value(3, 1, [])[.fs.CurrentTerm.what.c_str(), ]b4_rhs_value(3, 3, [])[.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_ARRAYBUILDER, string(codegen_buf) };
				newnode = flattern_bin(newnode);
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(131, [b4_syncline(953, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & exp = ]b4_rhs_value(8, 2, [])[;
				ParseNode & suite_true = ]b4_rhs_value(8, 5, [])[; suite_true.fs.CurrentTerm.what = tabber(suite_true.fs.CurrentTerm.what);
#ifndef LAZY_GEN
				sprintf(codegen_buf, "if (%s) {\n%s}", exp.fs.CurrentTerm.what.c_str(), suite_true.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_IF, string(codegen_buf) };
#endif // !LAZY_GEN

				newnode->addchild(new ParseNode(]b4_rhs_value(8, 1, [])[)); // if
				newnode->addchild(new ParseNode(exp)); // exp
				newnode->addchild(new ParseNode(suite_true)); // suite
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(132, [b4_syncline(969, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & exp = ]b4_rhs_value(11, 2, [])[;
				ParseNode & suite_true = ]b4_rhs_value(11, 5, [])[; suite_true.fs.CurrentTerm.what = tabber(suite_true.fs.CurrentTerm.what);
				ParseNode & suite_else = ]b4_rhs_value(11, 8, [])[; suite_else.fs.CurrentTerm.what = tabber(suite_else.fs.CurrentTerm.what);
#ifndef LAZY_GEN
				sprintf(codegen_buf, "if (%s) {\n%s}\nelse {\n %s}", exp.fs.CurrentTerm.what.c_str(), suite_true.fs.CurrentTerm.what.c_str(), suite_else.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_IF, string(codegen_buf) };
#endif // !LAZY_GEN

				newnode->addchild(new ParseNode(]b4_rhs_value(11, 1, [])[)); // if
				newnode->addchild(new ParseNode(exp)); // exp
				newnode->addchild(new ParseNode(suite_true)); // suite
				newnode->addchild(new ParseNode(]b4_rhs_value(11, 6, [])[)); // else
				newnode->addchild(new ParseNode(suite_else)); // else-stmt
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(133, [b4_syncline(988, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & exp = ]b4_rhs_value(9, 2, [])[;
				ParseNode & suite_true = ]b4_rhs_value(9, 5, [])[; suite_true.fs.CurrentTerm.what = tabber(suite_true.fs.CurrentTerm.what);
				ParseNode & elseif = ]b4_rhs_value(9, 6, [])[;
#ifndef LAZY_GEN
				sprintf(codegen_buf, "if (%s) {\n%s}\n%s", exp.fs.CurrentTerm.what.c_str(), suite_true.fs.CurrentTerm.what.c_str(), elseif.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_IF, string(codegen_buf) };
#endif // !LAZY_GEN

				newnode->addchild(new ParseNode(]b4_rhs_value(9, 1, [])[)); // if
				newnode->addchild(new ParseNode(exp)); // exp
				newnode->addchild(new ParseNode(suite_true)); // suite
				newnode->addchild(new ParseNode(elseif)); // recursive elseif-stmt
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(134, [b4_syncline(1006, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & exp = ]b4_rhs_value(12, 2, [])[;
				ParseNode & suite_true = ]b4_rhs_value(12, 5, [])[; suite_true.fs.CurrentTerm.what = tabber(suite_true.fs.CurrentTerm.what);
				ParseNode & elseif = ]b4_rhs_value(12, 6, [])[;
				ParseNode & suite_else = ]b4_rhs_value(12, 9, [])[; suite_else.fs.CurrentTerm.what = tabber(suite_else.fs.CurrentTerm.what);
				
#ifndef LAZY_GEN
				sprintf(codegen_buf, "if (%s) {\n%s}\n%selse {\n%s}", exp.fs.CurrentTerm.what.c_str(), suite_true.fs.CurrentTerm.what.c_str(), elseif.fs.CurrentTerm.what.c_str(), suite_else.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_IF, string(codegen_buf) };
#endif // !LAZY_GEN

				newnode->addchild(new ParseNode(]b4_rhs_value(12, 1, [])[)); // if
				newnode->addchild(new ParseNode(exp)); // exp
				newnode->addchild(new ParseNode(suite_true)); // suite
				newnode->addchild(new ParseNode(elseif)); // recursive elseif-stmt
				newnode->addchild(new ParseNode(suite_else)); // else-stmt
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(135, [b4_syncline(1027, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & exp = ]b4_rhs_value(4, 2, [])[;
				ParseNode & stmt_true = ]b4_rhs_value(4, 4, [])[; 
#ifndef LAZY_GEN
				sprintf(codegen_buf, "if (%s) %s", exp.fs.CurrentTerm.what.c_str(), stmt_true.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_IF, string(codegen_buf) };
#endif // !LAZY_GEN

				newnode->addchild(new ParseNode(]b4_rhs_value(4, 1, [])[)); // if
				newnode->addchild(new ParseNode(exp)); // exp
				newnode->addchild(new ParseNode(stmt_true)); // stmt
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(136, [b4_syncline(1043, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & exp = ]b4_rhs_value(5, 2, [])[;
				ParseNode & suite_true = ]b4_rhs_value(5, 5, [])[; suite_true.fs.CurrentTerm.what = tabber(suite_true.fs.CurrentTerm.what);
#ifndef LAZY_GEN
				sprintf(codegen_buf, "else if(%s) {\n%s}", exp.fs.CurrentTerm.what.c_str(), suite_true.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_ELSEIF, string(codegen_buf) };
#endif // !LAZY_GEN

				newnode->addchild(new ParseNode(]b4_rhs_value(5, 1, [])[)); // elseif
				newnode->addchild(new ParseNode(exp)); // exp
				newnode->addchild(new ParseNode(suite_true)); // suite
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(137, [b4_syncline(1060, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & exp = ]b4_rhs_value(6, 2, [])[;
				ParseNode & suite_true = ]b4_rhs_value(6, 5, [])[; suite_true.fs.CurrentTerm.what = tabber(suite_true.fs.CurrentTerm.what);
				ParseNode & elseif = ]b4_rhs_value(6, 6, [])[;
#ifndef LAZY_GEN
				sprintf(codegen_buf, "else if{\n%s}\n%s", exp.fs.CurrentTerm.what.c_str(), suite_true.fs.CurrentTerm.what.c_str(), elseif.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_ELSEIF, string(codegen_buf) };
#endif // !LAZY_GEN

				newnode->addchild(new ParseNode(]b4_rhs_value(6, 1, [])[)); // elseif
				newnode->addchild(new ParseNode(exp)); // exp
				newnode->addchild(new ParseNode(suite_true)); // suite
				newnode->addchild(new ParseNode(elseif)); // another elseif-stmt
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(138, [b4_syncline(1079, [["for90.y"]])
[    {
				ParseNode & suite = ]b4_rhs_value(6, 3, [])[; 
				]b4_lhs_value([])[ = gen_do(suite);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(139, [b4_syncline(1085, [["for90.y"]])
[    {
				ParseNode & loop_variable = ]b4_rhs_value(11, 2, [])[;
				ParseNode & exp_from = ]b4_rhs_value(11, 4, [])[;
				ParseNode & exp_to = ]b4_rhs_value(11, 6, [])[;
				ParseNode & step = gen_exp(gen_token(Term{ TokenMeta::META_INTEGER , "1" }));
				ParseNode & suite = ]b4_rhs_value(11, 8, [])[; 
				]b4_lhs_value([])[ = gen_do_range(exp_from, exp_from, exp_to, step, suite);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(140, [b4_syncline(1095, [["for90.y"]])
[    {
				ParseNode & loop_variable = ]b4_rhs_value(13, 2, [])[;
				ParseNode & exp1 = ]b4_rhs_value(13, 4, [])[;
				ParseNode & exp2 = ]b4_rhs_value(13, 6, [])[;
				ParseNode & exp3 = ]b4_rhs_value(13, 8, [])[;
				ParseNode & suite = ]b4_rhs_value(13, 10, [])[;
				]b4_lhs_value([])[ = gen_do_range(loop_variable, exp1, exp2, exp3, suite);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(141, [b4_syncline(1105, [["for90.y"]])
[    {
				ParseNode & exp = ]b4_rhs_value(7, 2, [])[;
				ParseNode & suite = ]b4_rhs_value(7, 4, [])[; 
				]b4_lhs_value([])[ = gen_do_while(exp, suite);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(142, [b4_syncline(1113, [["for90.y"]])
[    {
				ParseNode & select = ]b4_rhs_value(10, 1, [])[;
				ParseNode & exp = ]b4_rhs_value(10, 4, [])[;
				ParseNode & case_stmt = ]b4_rhs_value(10, 7, [])[;
				]b4_lhs_value([])[ = gen_select(exp, case_stmt);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(143, [b4_syncline(1121, [["for90.y"]])
[    {
				// one case
				ParseNode & dimen_slice = ]b4_rhs_value(6, 3, [])[;
				ParseNode & suite = ]b4_rhs_value(6, 6, [])[; 
				]b4_lhs_value([])[ = gen_case(dimen_slice, suite);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(144, [b4_syncline(1129, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				ParseNode & case_stmt_elem = ]b4_rhs_value(1, 1, [])[;
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_CASES, "" };
				newnode->addchild(new ParseNode(case_stmt_elem)); // case_stmt_elem
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(145, [b4_syncline(1138, [["for90.y"]])
[    {
				ParseNode & case_stmt_elem = ]b4_rhs_value(2, 1, [])[;
				ParseNode & case_stmt = ]b4_rhs_value(2, 2, [])[;
				ParseNode * newnode = new ParseNode(case_stmt);
				newnode->fs.CurrentTerm = Term{ TokenMeta::NT_CASES, "" };
				newnode->addchild(new ParseNode(case_stmt_elem), false /* add to the front of the vector */); // case_stmt_elem
				]b4_lhs_value([])[ = *newnode;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(146, [b4_syncline(1149, [["for90.y"]])
[    {
				]b4_lhs_value([])[ = ]b4_rhs_value(4, 3, [])[;
			}]])

b4_case(147, [b4_syncline(1153, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->fs.CurrentTerm = Term{ TokenMeta::UnknownVariant, "" }; // return nothing
				]b4_lhs_value([])[ = *newnode;
			}]])

b4_case(150, [b4_syncline(1163, [["for90.y"]])
[    {
				/* fortran90 does not declare type of arguments in function declaration statement*/
				ParseNode & variable_function = ]b4_rhs_value(12, 3, [])[; // function name
				/* enumerate paramtable */
				ParseNode & paramtable = ]b4_rhs_value(12, 5, [])[;
				ParseNode & variable_result = ]b4_rhs_value(12, 7, [])[; // result variable
				ParseNode & suite = ]b4_rhs_value(12, 9, [])[;

				]b4_lhs_value([])[ = gen_function(variable_function, paramtable, variable_result, suite);
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(153, [b4_syncline(1179, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->addchild(new ParseNode(]b4_rhs_value(8, 4, [])[)); //suite
				sprintf(codegen_buf, "int main()\n{\n%s\treturn 0;\n}", tabber(]b4_rhs_value(8, 4, [])[.fs.CurrentTerm.what).c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::META_NONTERMINAL, string(codegen_buf) };
				]b4_lhs_value([])[ = *newnode;
			}]])

b4_case(154, [b4_syncline(1189, [["for90.y"]])
[    {
				sprintf(codegen_buf, "%s", ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what.c_str());
				]b4_lhs_value([])[ = ]b4_rhs_value(1, 1, [])[;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(155, [b4_syncline(1195, [["for90.y"]])
[    {
				sprintf(codegen_buf, "%s", ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what.c_str());
				]b4_lhs_value([])[ = ]b4_rhs_value(1, 1, [])[;
				update_pos(]b4_lhs_value([])[);
			}]])

b4_case(156, [b4_syncline(1202, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->addchild(new ParseNode(]b4_rhs_value(1, 1, [])[)); // wrapper
				sprintf(codegen_buf, "%s", ]b4_rhs_value(1, 1, [])[.fs.CurrentTerm.what.c_str());
				newnode->fs.CurrentTerm = Term{ TokenMeta::META_NONTERMINAL, string(codegen_buf) };
				]b4_lhs_value([])[ = *newnode;
			}]])

b4_case(157, [b4_syncline(1210, [["for90.y"]])
[    {
				ParseNode * newnode = new ParseNode();
				newnode->addchild(new ParseNode(]b4_rhs_value(2, 1, [])[)); // wrapper
				newnode->addchild(new ParseNode(]b4_rhs_value(2, 2, [])[)); // wrappers
				sprintf(codegen_buf, "%s\n%s", ]b4_rhs_value(2, 1, [])[.fs.CurrentTerm.what.c_str(), ]b4_rhs_value(2, 2, [])[.fs.CurrentTerm.what.c_str());
				newnode = flattern_bin(newnode);
				newnode->fs.CurrentTerm = Term{ TokenMeta::META_NONTERMINAL, string(codegen_buf) };
				]b4_lhs_value([])[ = *newnode;
			}]])

b4_case(158, [b4_syncline(1221, [["for90.y"]])
[    {
				// drop interface directly
				ParseNode * newnode = new ParseNode();
				// no child
				newnode->fs.CurrentTerm = Term{ TokenMeta::META_NONTERMINAL, "" };
				]b4_lhs_value([])[ = *newnode;
			}]])

b4_case(159, [b4_syncline(1230, [["for90.y"]])
[    {
				program_tree = ]b4_rhs_value(1, 1, [])[;
			}]])

])

m4_define([b4_mergers], 
[[]])

m4_define([b4_tokens], 
[[[[_YY_VOID]], 258],
[[[YY_REQ_MORE]], 259],
[[[YY_CRLF]], 260],
[[[_YY_OP]], 261],
[[[YY_GT]], 262],
[[[YY_GE]], 263],
[[[YY_EQ]], 264],
[[[YY_LE]], 265],
[[[YY_LT]], 266],
[[[YY_NEQ]], 267],
[[[YY_NEQV]], 268],
[[[YY_EQV]], 269],
[[[YY_ANDAND]], 270],
[[[YY_OROR]], 271],
[[[YY_NOT]], 272],
[[[YY_POWER]], 273],
[[[YY_DOUBLECOLON]], 274],
[[[YY_NEG]], 275],
[[[YY_POS]], 276],
[[[_YY_TYPE]], 277],
[[[YY_INTEGER]], 278],
[[[YY_FLOAT]], 279],
[[[YY_WORD]], 280],
[[[YY_OPERATOR]], 281],
[[[YY_STRING]], 282],
[[[YY_ILLEGAL]], 283],
[[[YY_COMPLEX]], 284],
[[[YY_TRUE]], 285],
[[[YY_FALSE]], 286],
[[[_YY_CONTROL]], 287],
[[[YY_END]], 288],
[[[YY_IF]], 289],
[[[YY_THEN]], 290],
[[[YY_ELSE]], 291],
[[[YY_ELSEIF]], 292],
[[[YY_ENDIF]], 293],
[[[YY_DO]], 294],
[[[YY_ENDDO]], 295],
[[[YY_CONTINUE]], 296],
[[[YY_BREAK]], 297],
[[[YY_WHILE]], 298],
[[[YY_ENDWHILE]], 299],
[[[YY_WHERE]], 300],
[[[YY_ENDWHERE]], 301],
[[[YY_CASE]], 302],
[[[YY_ENDCASE]], 303],
[[[YY_SELECT]], 304],
[[[YY_ENDSELECT]], 305],
[[[YY_GOTO]], 306],
[[[YY_DOWHILE]], 307],
[[[YY_DEFAULT]], 308],
[[[_YY_DELIM]], 309],
[[[YY_PROGRAM]], 310],
[[[YY_ENDPROGRAM]], 311],
[[[YY_FUNCTION]], 312],
[[[YY_ENDFUNCTION]], 313],
[[[YY_RECURSIVE]], 314],
[[[YY_RESULT]], 315],
[[[YY_SUBROUTINE]], 316],
[[[YY_ENDSUBROUTINE]], 317],
[[[YY_MODULE]], 318],
[[[YY_ENDMODULE]], 319],
[[[YY_BLOCK]], 320],
[[[YY_ENDBLOCK]], 321],
[[[YY_INTERFACE]], 322],
[[[YY_ENDINTERFACE]], 323],
[[[_YY_DESCRIBER]], 324],
[[[YY_IMPLICIT]], 325],
[[[YY_NONE]], 326],
[[[YY_USE]], 327],
[[[YY_PARAMETER]], 328],
[[[YY_FORMAT]], 329],
[[[YY_ENTRY]], 330],
[[[YY_DIMENSION]], 331],
[[[YY_ARRAYINITIAL_START]], 332],
[[[YY_ARRAYINITIAL_END]], 333],
[[[YY_INTENT]], 334],
[[[YY_IN]], 335],
[[[YY_OUT]], 336],
[[[YY_INOUT]], 337],
[[[YY_OPTIONAL]], 338],
[[[YY_LEN]], 339],
[[[YY_KIND]], 340],
[[[_YY_TYPEDEF]], 341],
[[[YY_INTEGER_T]], 342],
[[[YY_FLOAT_T]], 343],
[[[YY_STRING_T]], 344],
[[[YY_COMPLEX_T]], 345],
[[[YY_BOOL_T]], 346],
[[[YY_CHARACTER_T]], 347],
[[[_YY_COMMAND]], 348],
[[[YY_WRITE]], 349],
[[[YY_READ]], 350],
[[[YY_PRINT]], 351],
[[[YY_OPEN]], 352],
[[[YY_CLOSE]], 353],
[[[YY_CALL]], 354]])

m4_define([b4_symbol_destructors], 
[])

m4_define([b4_symbol_printers], 
[])

m4_define([b4_translate],
[[     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     109,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     106,   107,   103,   101,   108,   102,     2,   104,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   110,   105,
       2,   100,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99]])


m4_define([b4_use_push_for_pull_flag],
[[0]])


m4_define([b4_pact_ninf],
[[-184]])


m4_define([b4_conflict_list_heads],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0]])


m4_define([b4_toknum_max],
[[354]])


m4_define([b4_rhs],
[[   167,     0,    -1,     5,    -1,   105,    -1,    -1,    59,    -1,
     113,    -1,    -1,    79,   106,    80,   107,    -1,    79,   106,
      81,   107,    -1,    79,   106,    82,   107,    -1,    76,   106,
     121,   107,    -1,    76,   106,   124,   107,    -1,    83,    -1,
      73,    -1,    85,   100,    23,    -1,    84,   100,   124,    -1,
     108,   114,    -1,   108,   114,   116,    -1,    -1,    24,    -1,
      23,    -1,    27,    -1,    30,    -1,    31,    -1,    29,    -1,
       1,   109,    -1,    25,    -1,   118,    -1,   144,    -1,   124,
     110,   124,    -1,   124,   110,   124,   110,   124,    -1,   110,
      -1,   120,    -1,   120,   108,   121,    -1,   124,    -1,   124,
     108,   125,    -1,   119,   106,   125,   107,    -1,   122,    -1,
      99,   122,    -1,   123,    -1,   106,   124,   107,    -1,   124,
     101,   124,    -1,   124,   102,   124,    -1,   124,   103,   124,
      -1,   124,   104,   124,    -1,   124,    18,   124,    -1,   102,
     124,    -1,   101,   124,    -1,   124,    12,   124,    -1,   124,
      13,   124,    -1,   124,     9,   124,    -1,   124,    14,   124,
      -1,   124,    15,   124,    -1,   124,    16,   124,    -1,    17,
     124,    -1,   124,     7,   124,    -1,   124,     8,   124,    -1,
     124,    10,   124,    -1,   124,    11,   124,    -1,   117,    -1,
     119,    -1,   121,    -1,    -1,   112,    -1,   105,   112,    -1,
     124,   126,    -1,   146,   126,    -1,   130,    -1,   128,    -1,
     129,    -1,   133,    -1,   132,    -1,   131,    -1,   166,    -1,
     141,   126,    -1,   142,   126,    -1,   143,   126,    -1,   153,
      -1,   155,    -1,   156,    -1,    41,   126,    -1,    42,   112,
      -1,    51,   112,    -1,   124,   100,   124,   126,    -1,    70,
      71,   112,    -1,   127,    -1,   127,   134,    -1,    -1,    -1,
     106,    -1,    -1,   107,    -1,   108,    -1,    -1,   103,    -1,
      23,    -1,   103,    -1,    27,    -1,   106,   138,   108,   139,
     107,    -1,   139,   137,    -1,    94,   140,   125,    -1,    96,
     140,   125,    -1,    95,   140,   125,    -1,    87,    -1,    88,
      -1,    89,    -1,    90,    -1,    91,    -1,    92,    -1,    87,
     106,   115,   107,    -1,    88,   106,   115,   107,    -1,    89,
     106,   115,   107,    -1,    90,   106,   115,   107,    -1,    91,
     106,   115,   107,    -1,    92,   106,   115,   107,    -1,   144,
      -1,   145,   116,    19,   148,    -1,   118,    -1,   118,   100,
     124,    -1,   118,   100,   152,    -1,   147,    -1,   147,   108,
     148,    -1,    -1,   124,   108,   118,   100,   124,   108,   124,
      -1,    77,   125,    78,    -1,    77,   149,    78,    -1,    35,
      -1,    -1,   150,    -1,   150,   108,   152,    -1,    34,   124,
      35,   112,   134,    33,    34,   112,    -1,    34,   124,    35,
     112,   134,    36,   112,   134,    33,    34,   112,    -1,    34,
     124,    35,   112,   134,   154,    33,    34,   112,    -1,    34,
     124,    35,   112,   134,   154,    36,   112,   134,    33,    34,
     112,    -1,    34,   124,   151,   127,    -1,    37,   124,    35,
     112,   134,    -1,    37,   124,    35,   112,   134,   154,    -1,
      39,   112,   134,    33,    39,   112,    -1,    39,   118,   100,
     124,   108,   124,   112,   134,    33,    39,   112,    -1,    39,
     118,   100,   124,   108,   124,   108,   124,   112,   134,    33,
      39,   112,    -1,    52,   124,   112,   134,    33,    39,   112,
      -1,    49,    47,   135,   124,   136,   112,   158,    33,    49,
     112,    -1,    47,   135,   121,   136,   112,   134,    -1,   157,
      -1,   157,   158,    -1,    60,   106,   118,   107,    -1,    -1,
      57,    -1,    61,    -1,   113,   160,   118,   106,   148,   107,
     159,   112,   134,    33,   160,   112,    -1,    25,    -1,    -1,
      55,   162,   112,   134,    33,    55,   162,   112,    -1,   161,
      -1,   163,    -1,   164,    -1,   164,   165,    -1,    67,   112,
     165,   112,    33,    67,   112,    -1,   165,    -1]])


m4_define([b4_last],
[[1365]])


m4_define([b4_stos_min],
[[0]])


m4_define([b4_tag_seen_flag],
[[0]])


m4_define([b4_token_table_flag],
[[0]])


m4_define([b4_parser_file_name],
[[for90.tab.cpp]])


m4_define([b4_table_min],
[[-116]])


m4_define([b4_table],
[[    18,    16,   132,    16,    68,   133,   171,   172,   173,   103,
       9,   135,   136,   137,   175,    20,   140,    16,  -116,    14,
      86,    19,    91,    21,    93,    19,    95,   260,   122,   123,
     261,   262,    87,   126,   146,   245,    15,   122,   123,    22,
     162,   249,   126,    68,     1,    23,    24,    19,     2,    25,
      11,    26,    27,    28,    12,   122,   123,    75,   285,   103,
     126,   286,   122,   123,   116,   117,    76,   119,   120,    83,
     122,   123,    68,   108,   109,   126,    85,   141,   148,   227,
      92,   232,    94,    97,   151,   104,   153,   116,   117,   118,
     119,   120,   121,   122,   123,   112,   113,   114,   126,   207,
       1,    17,    -7,    17,     2,    96,    -7,  -116,   152,    77,
      78,    79,    80,    81,    82,   154,   155,    88,   130,   131,
     163,    47,   316,    48,    49,    98,    99,   255,    50,   -63,
     134,    68,   167,   222,   202,   104,   100,    68,   105,   251,
     252,   253,   208,   128,   129,   130,   131,   101,   138,   102,
     235,   192,    19,   147,   170,   170,   170,   115,   128,   129,
     130,   131,   170,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   149,
     165,   128,   129,   130,   131,   198,   193,   199,    68,   194,
     200,   201,   195,   204,   205,   209,   196,   206,   210,   211,
     141,   212,   141,   233,   236,   240,   213,   281,   157,   158,
     159,   160,   161,   248,    77,    78,    79,    80,    81,    82,
     217,   214,   215,   216,   259,   218,   264,   221,   224,   266,
     225,   299,   241,   243,   257,   258,   304,   267,   268,   269,
     271,   273,   274,   275,   228,    68,   229,   277,   278,   282,
     313,   283,   289,   296,   297,   288,   242,   292,   293,   321,
     280,   301,   323,   307,   308,   170,   170,   247,   310,    68,
     315,   250,   298,   317,    68,   254,   302,   320,   295,   322,
     324,   337,   238,   330,   265,   262,   331,   226,    68,   336,
     311,   312,   110,   314,   111,   203,   305,    68,   244,   319,
      68,   279,   329,   325,   306,   309,     0,   326,     0,   284,
     328,   223,     0,     0,   332,   333,     0,   294,     0,    68,
     335,    21,     0,   170,     0,   -63,   338,     0,     0,     0,
       0,     0,     0,     0,   303,     0,     0,    22,     0,     0,
       0,     0,     0,    23,    24,    19,     0,    25,     0,    26,
      27,    28,   170,   -63,   -63,   318,   -63,   -63,     0,   -63,
       0,   -63,   -63,     0,     0,     0,     0,   -63,     0,   -63,
       0,   -63,   -63,     0,   334,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -63,     0,     0,
     -63,     0,     0,     0,     0,     0,     0,     0,   -63,     0,
       0,     0,     0,     0,     0,     0,     0,    77,    78,    79,
      80,    81,    82,    21,   -63,   -63,   -63,   -63,     0,    47,
       0,    48,    49,     0,     0,   -63,    50,   -63,     0,    22,
     167,     0,     0,     0,     0,    23,    24,    19,     0,    25,
       0,    26,    27,    28,    21,   -63,   -63,     0,   -63,   -63,
       0,   -63,     0,   -63,   -63,     0,     0,     0,     0,   -63,
      22,   -63,     0,   -63,   -63,     0,    23,    24,    19,     0,
      25,     0,    26,    27,    28,     0,     0,     0,     0,   -63,
       0,     0,   -63,     0,     0,     0,     0,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,     0,   126,    77,
      78,    79,    80,    81,    82,     0,   -63,   -63,   -63,     0,
       0,    47,     0,    48,    49,     0,     0,   -63,    50,     0,
       0,   -63,   167,     0,     0,     0,     0,     0,     0,     0,
      77,    78,    79,    80,    81,    82,    21,     0,     0,     0,
       0,     0,    47,     0,    48,    49,     0,     0,     0,    50,
       0,     0,    22,   167,     0,     0,     0,     0,    23,    24,
      19,     0,    25,    21,    26,    27,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    22,
       0,   128,   129,   130,   131,    23,    24,    19,   219,    25,
     220,    26,    27,    28,     0,   -86,    29,     0,   -86,   -86,
       0,    30,     0,    31,    32,     0,     0,     0,     0,   -86,
       0,    33,     0,    34,    35,     0,     0,     0,     0,     0,
       0,     0,    77,    78,    79,    80,    81,    82,     0,    36,
       0,     0,    37,     0,    47,     0,    48,    49,     0,     0,
       0,    50,     0,    21,     0,   167,     0,     0,     0,    38,
      39,    40,    41,    42,    43,     0,    44,    45,    46,    22,
       0,    47,     0,    48,    49,    23,    24,    19,    50,    25,
       0,    26,    27,    28,     0,   -88,    29,     0,   -88,   -88,
       0,    30,     0,    31,    32,     0,     0,     0,     0,     0,
       0,    33,     0,    34,    35,     0,     0,     0,     0,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    36,
     126,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    21,     0,     0,     0,     0,     0,    38,
      39,    40,    41,    42,    43,     0,    44,    45,    46,    22,
       0,    47,     0,    48,    49,    23,    24,    19,    50,    25,
       0,    26,    27,    28,     0,   -88,    29,     0,     0,     0,
       0,    30,     0,    31,    32,     0,     0,     0,     0,   -88,
       0,    33,     0,    34,    35,     0,     0,    16,     0,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    36,
     126,     0,    37,   128,   129,   130,   131,     0,     0,   272,
     219,     0,   220,    21,     0,     0,     0,     0,     0,    38,
      39,    40,    41,    42,    43,     0,    44,    45,    46,    22,
       0,    47,     0,    48,    49,    23,    24,    19,    50,    25,
       0,    26,    27,    28,     0,   -88,    29,     0,     0,     0,
       0,    30,     0,    31,    32,     0,     0,     0,     0,     0,
       0,    33,     0,    34,    35,     0,     0,     0,     0,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    36,
     126,     0,    37,   128,   129,   130,   131,    17,     0,     0,
     287,     0,     0,    21,     0,     0,     0,     0,     0,    38,
      39,    40,    41,    42,    43,     0,    44,    45,    46,    22,
       0,    47,     0,    48,    49,    23,    24,    19,    50,    25,
       0,    26,    27,    28,    21,     0,    29,     0,     0,     0,
       0,    30,     0,    31,    32,     0,     0,     0,     0,     0,
      22,    33,     0,    34,    35,    21,    23,    24,    19,     0,
      25,     0,    26,    27,    28,     0,     0,     0,     0,    36,
       0,    22,    37,   128,   129,   130,   131,    23,    24,    19,
     276,    25,   220,    26,    27,    28,     0,     0,     0,    38,
      39,    40,    41,    42,    43,     0,    44,    45,    46,     0,
       0,    47,     0,    48,    49,     0,     0,     0,    50,     0,
     228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      77,    78,    79,    80,    81,    82,     0,     0,     0,     0,
       0,     0,    47,     0,    48,    49,     0,     0,     0,    50,
       0,    77,    78,    79,    80,    81,    82,     0,     0,     0,
       0,     0,     0,    47,     0,    48,    49,     0,     0,     0,
      50,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,    16,   126,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,    16,   126,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    16,
     126,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,     0,   126,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,     0,   126,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   128,   129,   130,   131,     0,
       0,     0,     0,     0,   270,     0,     0,   128,   129,   130,
     131,     0,     0,     0,   237,     0,     0,     0,     0,   128,
     129,   130,   131,     0,     0,     0,   327,     0,     0,     0,
     127,   128,   129,   130,   131,    88,     0,     0,     0,     0,
       0,     0,     0,   128,   129,   130,   131,    17,     0,     0,
       0,     0,     0,     0,     0,   128,   129,   130,   131,    88,
       0,     0,     0,     0,     0,     0,     0,   128,   129,   130,
     131,     0,     0,   174,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,     0,   126,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,     0,   126,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,     0,   126,
       0,     0,     0,     0,   144,     0,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   300,   126,   116,   117,
     118,   119,   120,   121,   122,   123,   124,     0,     0,   126,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   128,   129,
     130,   131,     0,     0,   238,     0,     0,     0,     0,     0,
     128,   129,   130,   131,     0,     0,     0,     0,     0,     0,
       0,     0,   128,   129,   130,   131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     128,   129,   130,   131,     0,     0,     0,     0,     0,     0,
       0,     0,   128,   129,   130,   131]])


m4_define([b4_conflicting_rules_max],
[[0]])


m4_define([b4_merger],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0]])


m4_define([b4_glr_flag],
[[0]])


m4_define([b4_percent_define_syncline(lr.keep-unreachable-states)],
[[]])


m4_define([b4_check_max],
[[336]])


m4_define([b4_spec_graph_file],
[[]])


m4_define([b4_rline_min],
[[0]])


m4_define([b4_toknum],
[[     0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      61,    43,    45,    42,    47,    59,    40,    41,    44,    10,
      58]])


m4_define([b4_defgoto_max],
[[291]])


m4_define([b4_version],
[[2.7]])


m4_define([b4_translate_min],
[[0]])


m4_define([b4_pkgdatadir],
[[F:\Codes\CommonLib\winflex\data]])


m4_define([b4_pgoto_min],
[[-184]])


m4_define([b4_rhs_max],
[[167]])


m4_define([b4_pgoto],
[[  -184,   -10,  -184,  -184,   110,    90,  -184,     2,   245,  -184,
    -183,   247,  -184,    47,  -101,   -54,   150,  -184,  -184,  -184,
    -184,  -184,  -184,   -52,     7,   -13,  -184,  -184,    81,    28,
    -184,  -184,  -184,   -14,  -184,  -184,  -184,  -119,  -184,  -184,
    -184,    44,  -184,   -19,  -184,  -184,  -184,    14,  -184,     8,
    -184,   119,  -184,  -184,    13,  -184,  -184]])


m4_define([b4_pact_max],
[[1261]])


m4_define([b4_debug_flag],
[[1]])


m4_define([b4_yacc_flag],
[[0]])


m4_define([b4_spec_verbose_file],
[[]])


m4_define([b4_conflict_list_heads_min],
[[0]])


m4_define([b4_tname],
[["$][end", "error", "$][undefined", "_YY_VOID", "YY_REQ_MORE", "YY_CRLF",
  "_YY_OP", "YY_GT", "YY_GE", "YY_EQ", "YY_LE", "YY_LT", "YY_NEQ",
  "YY_NEQV", "YY_EQV", "YY_ANDAND", "YY_OROR", "YY_NOT", "YY_POWER",
  "YY_DOUBLECOLON", "YY_NEG", "YY_POS", "_YY_TYPE", "YY_INTEGER",
  "YY_FLOAT", "YY_WORD", "YY_OPERATOR", "YY_STRING", "YY_ILLEGAL",
  "YY_COMPLEX", "YY_TRUE", "YY_FALSE", "_YY_CONTROL", "YY_END", "YY_IF",
  "YY_THEN", "YY_ELSE", "YY_ELSEIF", "YY_ENDIF", "YY_DO", "YY_ENDDO",
  "YY_CONTINUE", "YY_BREAK", "YY_WHILE", "YY_ENDWHILE", "YY_WHERE",
  "YY_ENDWHERE", "YY_CASE", "YY_ENDCASE", "YY_SELECT", "YY_ENDSELECT",
  "YY_GOTO", "YY_DOWHILE", "YY_DEFAULT", "_YY_DELIM", "YY_PROGRAM",
  "YY_ENDPROGRAM", "YY_FUNCTION", "YY_ENDFUNCTION", "YY_RECURSIVE",
  "YY_RESULT", "YY_SUBROUTINE", "YY_ENDSUBROUTINE", "YY_MODULE",
  "YY_ENDMODULE", "YY_BLOCK", "YY_ENDBLOCK", "YY_INTERFACE",
  "YY_ENDINTERFACE", "_YY_DESCRIBER", "YY_IMPLICIT", "YY_NONE", "YY_USE",
  "YY_PARAMETER", "YY_FORMAT", "YY_ENTRY", "YY_DIMENSION",
  "YY_ARRAYINITIAL_START", "YY_ARRAYINITIAL_END", "YY_INTENT", "YY_IN",
  "YY_OUT", "YY_INOUT", "YY_OPTIONAL", "YY_LEN", "YY_KIND", "_YY_TYPEDEF",
  "YY_INTEGER_T", "YY_FLOAT_T", "YY_STRING_T", "YY_COMPLEX_T", "YY_BOOL_T",
  "YY_CHARACTER_T", "_YY_COMMAND", "YY_WRITE", "YY_READ", "YY_PRINT",
  "YY_OPEN", "YY_CLOSE", "YY_CALL", "'='", "'+'", "'-'", "'*'", "'/'",
  "';'", "'('", "')'", "','", "'\\n'", "':'", "$][accept", "crlf",
  "dummy_function_iden", "variable_desc_elem", "typecast_spec",
  "variable_desc", "literal", "variable", "callable_head", "slice",
  "dimen_slice", "function_array_body", "function_array", "exp",
  "argtable", "_crlf_semicolon", "stmt", "output_stmt", "input_stmt",
  "compound_stmt", "jump_stmt", "let_stmt", "dummy_stmt", "suite",
  "_optional_lbrace", "_optional_rbrace", "_optional_comma",
  "_optional_device", "_optional_formatter", "io_info", "write", "print",
  "read", "type_nospec", "type_spec", "var_def", "keyvalue", "paramtable",
  "_generate_stmt", "array_builder_elem", "_optional_then",
  "array_builder", "if_stmt", "elseif_stmt", "do_stmt", "select_stmt",
  "case_stmt_elem", "case_stmt", "_optional_result", "_optional_function",
  "function_decl", "_optional_name", "program", "wrapper", "wrappers",
  "interface_decl", "fortran_program", ]b4_null[]])


m4_define([b4_defact],
[[     7,   152,     5,     0,   154,   155,   156,   159,     0,   151,
       4,   148,   149,     0,   157,     1,     2,     3,     0,    27,
       0,     0,     0,    21,    20,    22,    25,    23,    24,     0,
       4,     4,     4,     0,     4,     0,     4,     0,   104,   105,
     106,   107,   108,   109,     0,     0,     0,     0,     0,     0,
       0,    60,    28,    61,    38,    40,     4,     0,    69,    70,
      68,    73,    72,    71,     0,     4,     4,     4,    29,    19,
       4,    78,    79,    80,    74,   123,    26,   104,   105,   106,
     107,   108,   109,    55,    29,   128,     0,     0,     3,    64,
      81,    82,    89,    83,     4,     7,     4,     0,     0,     0,
       0,     0,     0,    98,    97,     0,    94,     0,     0,     0,
       0,    39,    48,    47,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    66,    87,     0,    75,    76,    77,     0,     0,
      67,   118,   121,     0,     4,     0,     0,     0,    65,    90,
       0,     0,     4,    85,     0,     0,     0,     0,     0,     0,
       0,     0,    96,    95,     0,    93,   100,    32,    33,    62,
      35,   101,   103,   102,    41,     0,    56,    57,    51,    58,
      59,    49,    50,    52,    53,    54,    46,     4,    42,    43,
      44,    45,   152,    14,     0,     0,    13,    17,   123,     0,
     123,   147,     0,   135,     0,     0,    91,     0,     0,     0,
       0,   110,   111,   112,   113,   114,   115,     0,     0,     0,
       0,    37,    84,     4,     0,     0,    18,   117,     0,   119,
     129,   120,   122,     0,     4,     0,     4,     0,    92,     4,
       0,     0,    16,    15,     0,    34,    36,    30,   153,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     4,     0,     0,   138,     4,     0,     4,     4,    99,
       0,    11,    12,     8,     9,    10,     0,   125,   126,   130,
       0,     0,     4,     0,     0,     0,     4,     0,     0,    89,
     144,     0,   141,   158,    31,    28,   146,     0,   131,     0,
       4,     4,     0,     4,     0,     0,   145,     0,     0,     4,
       0,     0,   133,     0,     0,     0,    91,     4,     0,   150,
       4,   136,     0,     0,     4,     4,   142,     0,   132,   137,
       4,     0,   139,     0,   124,   134,     4,   143,   140]])


m4_define([b4_tokens_number],
[[111]])


m4_define([b4_stos_max],
[[167]])


m4_define([b4_merger_min],
[[0]])


m4_define([b4_table_max],
[[338]])


m4_define([b4_spec_name_prefix],
[[]])


m4_define([b4_epilogue],
[[]b4_syncline(1234, [["for90.y"]])[

//extern "C" int yylex();

void yyerror(const char* s)
{
	// fprintf(stderr, "%s", s);
	print_error(string(s), yylval);
}

void update_pos(YYSTYPE & current_node) {
	if (current_node.child.size() == 0) {
		/* do nothing */
	}
	else if (current_node.child.size() == 1) {
		current_node.fs.parse_pos = current_node.child@{0@}->fs.parse_pos;
		current_node.fs.parse_line = current_node.child@{0@}->fs.parse_line;
		current_node.fs.parse_len = current_node.child@{0@}->fs.parse_len;
		current_node.fs.line_pos = current_node.child@{0@}->fs.line_pos;
	}
	else {
		int tot_len = 0;
		for (int i = 0; i < current_node.child.size(); i++)
		{
			tot_len += current_node.child@{i@}->fs.parse_len;
		}
		current_node.fs.parse_pos = current_node.child@{0@}->fs.parse_pos;
		current_node.fs.parse_line = current_node.child@{0@}->fs.parse_line;
		current_node.fs.parse_len = tot_len;
		current_node.fs.line_pos = current_node.child@{0@}->fs.line_pos;
	}
}

int parse(std::string code) {
#ifdef USE_YACC
	set_buff(code);
	yyparse();
	release_buff();
#endif
	return 0;
}
]])


m4_define([b4_table_ninf],
[[-117]])


m4_define([b4_prhs],
[[     0,     0,     3,     5,     7,     8,    10,    12,    13,    18,
      23,    28,    33,    38,    40,    42,    46,    50,    53,    57,
      58,    60,    62,    64,    66,    68,    70,    73,    75,    77,
      79,    83,    89,    91,    93,    97,    99,   103,   108,   110,
     113,   115,   119,   123,   127,   131,   135,   139,   142,   145,
     149,   153,   157,   161,   165,   169,   172,   176,   180,   184,
     188,   190,   192,   194,   195,   197,   200,   203,   206,   208,
     210,   212,   214,   216,   218,   220,   223,   226,   229,   231,
     233,   235,   238,   241,   244,   249,   253,   255,   258,   259,
     260,   262,   263,   265,   267,   268,   270,   272,   274,   276,
     282,   285,   289,   293,   297,   299,   301,   303,   305,   307,
     309,   314,   319,   324,   329,   334,   339,   341,   346,   348,
     352,   356,   358,   362,   363,   371,   375,   379,   381,   382,
     384,   388,   397,   409,   419,   432,   437,   443,   450,   457,
     469,   483,   491,   502,   509,   511,   514,   519,   520,   522,
     524,   537,   539,   540,   549,   551,   553,   555,   558,   566]])


m4_define([b4_check],
[[    10,     5,    56,     5,    18,    57,   107,   108,   109,    27,
      25,    65,    66,    67,   115,    13,    70,     5,    19,     6,
      30,    25,    32,     1,    34,    25,    36,    33,    13,    14,
      36,    37,    30,    18,    86,   218,     0,    13,    14,    17,
      23,   224,    18,    57,    55,    23,    24,    25,    59,    27,
      57,    29,    30,    31,    61,    13,    14,   106,    33,    27,
      18,    36,    13,    14,     7,     8,   109,    10,    11,    22,
      13,    14,    86,    45,    46,    18,    29,    75,    88,   198,
      47,   200,    35,   106,    94,   103,    96,     7,     8,     9,
      10,    11,    12,    13,    14,    48,    49,    50,    18,   151,
      55,   105,    57,   105,    59,    71,    61,   108,    95,    87,
      88,    89,    90,    91,    92,    84,    85,   105,   103,   104,
     103,    99,   305,   101,   102,   106,   106,   228,   106,   107,
      33,   145,   110,   187,   144,   103,   106,   151,   106,    80,
      81,    82,   152,   101,   102,   103,   104,   106,   108,   106,
     202,    55,    25,   100,   107,   108,   109,   106,   101,   102,
     103,   104,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   106,
     108,   101,   102,   103,   104,    19,    73,   100,   202,    76,
     108,   107,    79,    33,   147,   100,    83,   150,   100,   107,
     198,   107,   200,    60,    39,    33,   107,   259,    98,    99,
     100,   101,   102,   223,    87,    88,    89,    90,    91,    92,
     108,   107,   107,   107,   234,   108,   236,   107,   106,   239,
     106,   283,    33,    23,   108,   106,   288,    39,    67,   107,
     107,   107,   107,   107,    77,   259,   199,    78,    78,    34,
     302,   261,    47,   107,    33,   265,   209,   267,   268,   311,
     258,    34,   314,    33,   100,   218,   219,   220,    33,   283,
      33,   224,   282,    49,   288,   228,   286,    34,   276,    33,
      39,   333,   107,    34,   237,    37,    33,   197,   302,    39,
     300,   301,    47,   303,    47,   145,   289,   311,   217,   309,
     314,   257,   321,   316,   290,   297,    -1,   317,    -1,   262,
     320,   192,    -1,    -1,   324,   325,    -1,   270,    -1,   333,
     330,     1,    -1,   276,    -1,     5,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   287,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    -1,    23,    24,    25,    -1,    27,    -1,    29,
      30,    31,   305,    33,    34,   308,    36,    37,    -1,    39,
      -1,    41,    42,    -1,    -1,    -1,    -1,    47,    -1,    49,
      -1,    51,    52,    -1,   327,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
      70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,    88,    89,
      90,    91,    92,     1,    94,    95,    96,     5,    -1,    99,
      -1,   101,   102,    -1,    -1,   105,   106,   107,    -1,    17,
     110,    -1,    -1,    -1,    -1,    23,    24,    25,    -1,    27,
      -1,    29,    30,    31,     1,    33,    34,    -1,    36,    37,
      -1,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    47,
      17,    49,    -1,    51,    52,    -1,    23,    24,    25,    -1,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    67,
      -1,    -1,    70,    -1,    -1,    -1,    -1,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    -1,    18,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    -1,
      -1,    99,    -1,   101,   102,    -1,    -1,   105,   106,    -1,
      -1,    78,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      87,    88,    89,    90,    91,    92,     1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,   101,   102,    -1,    -1,    -1,   106,
      -1,    -1,    17,   110,    -1,    -1,    -1,    -1,    23,    24,
      25,    -1,    27,     1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    17,
      -1,   101,   102,   103,   104,    23,    24,    25,   108,    27,
     110,    29,    30,    31,    -1,    33,    34,    -1,    36,    37,
      -1,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    87,    88,    89,    90,    91,    92,    -1,    67,
      -1,    -1,    70,    -1,    99,    -1,   101,   102,    -1,    -1,
      -1,   106,    -1,     1,    -1,   110,    -1,    -1,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    17,
      -1,    99,    -1,   101,   102,    23,    24,    25,   106,    27,
      -1,    29,    30,    31,    -1,    33,    34,    -1,    36,    37,
      -1,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    -1,    51,    52,    -1,    -1,    -1,    -1,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    67,
      18,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    17,
      -1,    99,    -1,   101,   102,    23,    24,    25,   106,    27,
      -1,    29,    30,    31,    -1,    33,    34,    -1,    -1,    -1,
      -1,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    67,
      18,    -1,    70,   101,   102,   103,   104,    -1,    -1,   107,
     108,    -1,   110,     1,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    17,
      -1,    99,    -1,   101,   102,    23,    24,    25,   106,    27,
      -1,    29,    30,    31,    -1,    33,    34,    -1,    -1,    -1,
      -1,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    -1,    51,    52,    -1,    -1,    -1,    -1,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    67,
      18,    -1,    70,   101,   102,   103,   104,   105,    -1,    -1,
     108,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    17,
      -1,    99,    -1,   101,   102,    23,    24,    25,   106,    27,
      -1,    29,    30,    31,     1,    -1,    34,    -1,    -1,    -1,
      -1,    39,    -1,    41,    42,    -1,    -1,    -1,    -1,    -1,
      17,    49,    -1,    51,    52,     1,    23,    24,    25,    -1,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    67,
      -1,    17,    70,   101,   102,   103,   104,    23,    24,    25,
     108,    27,   110,    29,    30,    31,    -1,    -1,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    -1,
      -1,    99,    -1,   101,   102,    -1,    -1,    -1,   106,    -1,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      87,    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,
      -1,    -1,    99,    -1,   101,   102,    -1,    -1,    -1,   106,
      -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    99,    -1,   101,   102,    -1,    -1,    -1,
     106,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    -1,    18,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    -1,    18,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,     5,    18,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,     5,    18,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,     5,
      18,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    -1,    18,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    -1,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,   102,   103,   104,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,   101,   102,   103,
     104,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,   101,
     102,   103,   104,    -1,    -1,    -1,   108,    -1,    -1,    -1,
     100,   101,   102,   103,   104,   105,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,   102,   103,   104,   105,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,   102,   103,   104,   105,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,
     104,    -1,    -1,   107,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    -1,    18,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    -1,    18,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    -1,    18,
      -1,    -1,    -1,    -1,    35,    -1,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    35,    18,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    -1,    -1,    18,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,
     103,   104,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
     101,   102,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,   102,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     101,   102,   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,   102,   103,   104]])


m4_define([b4_nterms_number],
[[57]])


m4_define([b4_rline_max],
[[1229]])


m4_define([b4_dprec],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0]])


m4_define([b4_percent_define_loc(lr.default-reductions)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_rline],
[[     0,    54,    54,    59,    65,    70,    71,    72,    74,    84,
      95,   105,   127,   153,   162,   173,   184,   189,   195,   209,
     218,   223,   227,   232,   236,   240,   247,   250,   257,   263,
     270,   279,   289,   299,   309,   320,   327,   336,   346,   350,
     355,   363,   371,   379,   387,   395,   403,   411,   418,   425,
     433,   441,   449,   457,   465,   473,   480,   488,   496,   504,
     512,   518,   526,   532,   538,   539,   541,   558,   571,   572,
     573,   574,   575,   585,   595,   598,   599,   601,   603,   604,
     605,   607,   608,   609,   611,   620,   629,   639,   653,   665,
     666,   667,   668,   669,   670,   671,   676,   681,   686,   694,
     706,   721,   729,   738,   746,   751,   756,   761,   766,   771,
     777,   784,   789,   794,   799,   804,   809,   812,   823,   831,
     838,   847,   855,   871,   879,   891,   906,   929,   930,   931,
     940,   952,   968,   987,  1005,  1026,  1042,  1059,  1078,  1084,
    1094,  1104,  1112,  1120,  1128,  1137,  1148,  1153,  1159,  1160,
    1162,  1175,  1176,  1178,  1188,  1194,  1201,  1209,  1220,  1229]])


m4_define([b4_prhs_min],
[[0]])


m4_define([b4_percent_define_bison_variables(lr.keep-unreachable-states)],
[[]])


m4_define([b4_spec_outfile],
[[for90.tab.cpp]])


m4_define([b4_translate_max],
[[110]])


m4_define([b4_user_token_number_max],
[[354]])


m4_define([b4_r1_min],
[[0]])


m4_define([b4_max_left_semantic_context],
[[0]])


m4_define([b4_pgoto_max],
[[247]])


m4_define([b4_rules_number],
[[159]])


m4_define([b4_file_name_all_but_ext],
[[for90.tab]])


m4_define([b4_error_verbose_flag],
[[0]])


m4_define([b4_percent_define(lr.type)],
[[lalr]])


m4_define([b4_r2_min],
[[0]])


m4_define([b4_pact],
[[   -11,   -15,  -184,    -7,  -184,  -184,    45,  -184,    36,  -184,
      -2,  -184,  -184,     0,  -184,  -184,  -184,  -184,   802,  -184,
     -49,   -43,   934,  -184,  -184,  -184,  -184,  -184,  -184,   934,
      -4,    12,    -2,    33,    -2,   934,    -2,    34,   -23,    19,
      20,    30,    41,    43,    32,    32,    32,   127,   934,   934,
     934,  -184,  -184,    51,  -184,  -184,  1070,   562,  -184,  -184,
    -184,  -184,  -184,  -184,    97,    12,    12,    12,    -1,    40,
      12,  -184,  -184,  -184,  -184,     0,  -184,  -184,  -184,  -184,
    -184,  -184,  -184,    49,  -184,  1219,   802,    53,    -2,  -184,
    -184,  -184,    73,  -184,  1082,   -11,    -2,    31,    31,    31,
      31,    31,    31,  -184,  -184,    17,    72,   412,   412,   412,
      51,  -184,    42,    42,  1106,    22,   934,   934,   934,   934,
     934,   934,   934,   934,   934,   934,   934,   934,   934,   934,
     934,   934,  -184,  -184,    96,  -184,  -184,  -184,   113,   166,
    -184,    87,    82,    84,    -2,   882,   160,   934,  -184,  -184,
     934,   802,    -2,  -184,    95,    98,    92,    94,    99,   114,
     115,   116,  -184,  -184,   112,  -184,  -184,  -184,   117,  -184,
     480,  -184,  -184,  -184,  -184,   120,    42,    42,    57,    42,
      42,    57,  1249,  1249,    80,  1261,    49,  1094,    15,    15,
      24,    24,   -15,  -184,   122,   124,  -184,    40,     0,   913,
       0,   143,   642,  -184,   165,  1046,  1207,   172,   199,   934,
     210,  -184,  -184,  -184,  -184,  -184,  -184,   -18,   535,   320,
     934,  -184,  -184,    -2,   535,    59,  -184,  -184,   443,  1249,
     126,  -184,  -184,   129,    -2,    -6,    -2,   934,  -184,    -2,
     198,   171,  1249,  -184,   132,  -184,  -184,  1034,  -184,   133,
     692,   134,   135,   136,   852,   169,   170,   167,     0,   802,
     215,    -2,   934,    25,  -184,   772,   205,    -2,    -2,  -184,
     934,  -184,  -184,  -184,  -184,  -184,   443,  -184,  -184,  -184,
     146,   221,    -2,   802,  1231,   227,    -2,   934,   802,    73,
     205,   230,  -184,  -184,  1249,   164,  -184,    -7,  -184,   235,
      -2,    -2,   802,  1082,   237,   535,  -184,   224,   934,    -2,
     243,   642,  -184,   246,   802,   241,   175,    -2,  1058,  -184,
      -2,   248,   249,   253,    -2,    -2,  -184,   934,  -184,  -184,
      -2,   250,  -184,   722,  1249,  -184,    -2,  -184,  -184]])


m4_define([b4_dprec_min],
[[0]])


m4_define([b4_defact_min],
[[0]])


m4_define([b4_percent_define(lr.keep-unreachable-states)],
[[false]])


m4_define([b4_synclines_flag],
[[1]])


m4_define([b4_nondeterministic_flag],
[[0]])


m4_define([b4_defines_flag],
[[1]])


m4_define([b4_conflict_list_heads_max],
[[0]])


m4_define([b4_dir_prefix],
[[]])


m4_define([b4_merger_max],
[[0]])


m4_define([b4_undef_token_number],
[[2]])


m4_define([b4_percent_define_bison_variables(lr.type)],
[[]])


m4_define([b4_percent_define_loc(lr.keep-unreachable-states)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_prhs_max],
[[566]])


m4_define([b4_spec_file_prefix],
[[]])


m4_define([b4_r1_max],
[[167]])


m4_define([b4_percent_define_bison_variables(lr.default-reductions)],
[[]])


m4_define([b4_percent_define_loc(lr.type)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_toknum_min],
[[0]])


m4_define([b4_percent_define(lr.default-reductions)],
[[most]])


m4_define([b4_spec_defines_file],
[[for90.tab.h]])


m4_define([b4_conflicting_rules_min],
[[0]])


m4_define([b4_r1],
[[     0,   111,   112,   112,   112,   113,   113,   113,   114,   114,
     114,   114,   114,   114,   114,   115,   115,   116,   116,   116,
     117,   117,   117,   117,   117,   117,   117,   118,   119,   119,
     120,   120,   120,   121,   121,   121,   121,   122,   123,   123,
     124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
     124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
     124,   124,   125,   125,   126,   126,   127,   127,   127,   127,
     127,   127,   127,   127,   127,   128,   128,   129,   130,   130,
     130,   131,   131,   131,   132,   133,   134,   134,   134,   135,
     135,   136,   136,   137,   137,   138,   138,   139,   139,   140,
     140,   141,   142,   143,   144,   144,   144,   144,   144,   144,
     145,   145,   145,   145,   145,   145,   145,   146,   147,   147,
     147,   148,   148,   148,   149,   150,   150,   151,   151,   152,
     152,   153,   153,   153,   153,   153,   154,   154,   155,   155,
     155,   155,   156,   157,   158,   158,   159,   159,   160,   160,
     161,   162,   162,   163,   164,   164,   165,   165,   166,   167]])


m4_define([b4_pre_prologue],
[[]b4_syncline(1, [["for90.y"]])[

#include <stdio.h>
#include <string>
#include <sstream>
#include <iostream>
#include <stdarg.h>
#include <tuple>
#include "../tokenizer.h"
#include "../attribute.h"
#include "../parser.h"
#include "../gen_config.h"
#include "../Function.h"
#include "../codegen.h"


// 前置声明, 不然编译不过
void yyerror(const char* s); 
extern int yylex();
extern void set_buff(const std::string & code);
extern void release_buff();
#define YYDEBUG 1
#define YYERROR_VERBOSE
// static is necessary, or will cause lnk
static char codegen_buf@{MAX_CODE_LENGTH@};
using namespace std;
]])


m4_define([b4_r2],
[[     0,     2,     1,     1,     0,     1,     1,     0,     4,     4,
       4,     4,     4,     1,     1,     3,     3,     2,     3,     0,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       3,     5,     1,     1,     3,     1,     3,     4,     1,     2,
       1,     3,     3,     3,     3,     3,     3,     2,     2,     3,
       3,     3,     3,     3,     3,     2,     3,     3,     3,     3,
       1,     1,     1,     0,     1,     2,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     2,     2,     2,     4,     3,     1,     2,     0,     0,
       1,     0,     1,     1,     0,     1,     1,     1,     1,     5,
       2,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       4,     4,     4,     4,     4,     4,     1,     4,     1,     3,
       3,     1,     3,     0,     7,     3,     3,     1,     0,     1,
       3,     8,    11,     9,    12,     4,     5,     6,     6,    11,
      13,     7,    10,     6,     1,     2,     4,     0,     1,     1,
      12,     1,     0,     8,     1,     1,     1,     2,     7,     1]])


m4_define([b4_check_min],
[[-1]])


m4_define([b4_states_number],
[[339]])


m4_define([b4_r2_max],
[[13]])


m4_define([b4_dprec_max],
[[0]])


m4_define([b4_defgoto],
[[    -1,    89,     3,   197,   156,   139,    51,    52,    53,   168,
     169,    54,    55,    56,   246,    90,    57,    58,    59,    60,
      61,    62,    63,    64,   150,   239,   166,   164,   106,   107,
      65,    66,    67,    84,    69,    70,   142,   143,   256,   230,
     145,   231,    71,   263,    72,    73,   290,   291,   234,    13,
       4,    10,     5,     6,     7,    74,     8]])


m4_define([b4_defact_max],
[[159]])


m4_define([b4_stos],
[[     0,    55,    59,   113,   161,   163,   164,   165,   167,    25,
     162,    57,    61,   160,   165,     0,     5,   105,   112,    25,
     118,     1,    17,    23,    24,    27,    29,    30,    31,    34,
      39,    41,    42,    49,    51,    52,    67,    70,    87,    88,
      89,    90,    91,    92,    94,    95,    96,    99,   101,   102,
     106,   117,   118,   119,   122,   123,   124,   127,   128,   129,
     130,   131,   132,   133,   134,   141,   142,   143,   144,   145,
     146,   153,   155,   156,   166,   106,   109,    87,    88,    89,
      90,    91,    92,   124,   144,   124,   112,   118,   105,   112,
     126,   112,    47,   112,   124,   112,    71,   106,   106,   106,
     106,   106,   106,    27,   103,   106,   139,   140,   140,   140,
     119,   122,   124,   124,   124,   106,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    18,   100,   101,   102,
     103,   104,   126,   134,    33,   126,   126,   126,   108,   116,
     126,   118,   147,   148,    35,   151,   134,   100,   112,   106,
     135,   112,   165,   112,    84,    85,   115,   115,   115,   115,
     115,   115,    23,   103,   138,   108,   137,   110,   120,   121,
     124,   125,   125,   125,   107,   125,   124,   124,   124,   124,
     124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
     124,   124,    55,    73,    76,    79,    83,   114,    19,   100,
     108,   107,   112,   127,    33,   124,   124,   134,   112,   100,
     100,   107,   107,   107,   107,   107,   107,   108,   108,   108,
     110,   107,   126,   162,   106,   106,   116,   148,    77,   124,
     150,   152,   148,    60,   159,   134,    39,   108,   107,   136,
      33,    33,   124,    23,   139,   121,   125,   124,   112,   121,
     124,    80,    81,    82,   124,   125,   149,   108,   106,   112,
      33,    36,    37,   154,   112,   124,   112,    39,    67,   107,
     110,   107,   107,   107,   107,   107,   108,    78,    78,   152,
     118,   134,    34,   112,   124,    33,    36,   108,   112,    47,
     157,   158,   112,   112,   124,   118,   107,    33,   112,   134,
      35,    34,   112,   124,   134,   135,   158,    33,   100,   160,
      33,   112,   112,   134,   112,    33,   121,    49,   124,   112,
      34,   134,    33,   134,    39,   136,   112,   108,   112,   154,
      34,    33,   112,   112,   124,   112,    39,   134,   112]])


m4_define([b4_final_state_number],
[[15]])


m4_define([b4_defgoto_min],
[[-1]])


m4_define([b4_file_name],
[["for90.y"]])


m4_define([b4_percent_define_syncline(lr.default-reductions)],
[[]])


m4_define([b4_percent_define_syncline(lr.type)],
[[]])


m4_define([b4_locations_flag],
[[0]])


m4_define([b4_rhs_min],
[[-1]])


m4_define([b4_pact_min],
[[-184]])


m4_define([b4_conflicting_rules],
[[     0]])


